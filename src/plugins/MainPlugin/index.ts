import { PluginInfo, literal, PluginCategory, argument } from "../../bot/plugin";
import { textJoin } from "../../model/text";
import { StringArgumentType, StringType } from "../../command/arguments";
import { Ayzek } from "../../bot/ayzek";
import { Text } from '../../model/text';
import { padList } from "../../util/pad";

function padAllListItemExceptFirst(list: string[]) {
	return [
		list[0],
		...padList(list.slice(1), '      ')
	];
}

function describePlugin(ayzek: Ayzek<any>, plugin: PluginInfo): Text<any> {
	return [
		`üß© ${plugin.name}${plugin.category ? ` –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${plugin.category}` : ''}\n`,
		`üïµ‚Äç –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ${plugin.author}\n`,
		`üí¨ ${plugin.description}`,
		...((plugin.commands.length > 0 || plugin.listeners.length > 0) ? [
			`\n\n–°–ø–∏—Å–æ–∫ —Ñ–∏—á:\n`,
			textJoin([
				textJoin(plugin.commands.map(command => {
					const commandNode = ayzek.commandDispatcher.root.literals.get(command.literal);
					return [
						`‚ö° /${command.literal} `,
						// TODO: Restricted
						{
							type: 'code',
							data: textJoin(padAllListItemExceptFirst(ayzek.commandDispatcher.getAllUsage(commandNode!, null as any, false)), '\n')
						}
					];
				}), '\n'),
				textJoin(plugin.listeners.map(listener => [
					`üëÅ‚Äçüó® ${listener.name}${listener.description ? ` ‚Äî ${listener.description}` : ''}`
				]), '\n')
			].filter(e => e.length !== 0), '\n\n'),
		] : [])
	]
}

const debugCommand = literal('debug')
	.then(literal('mentions').executes(async ctx => {
		ctx.source.event.conversation.send([
			'User mention:\n',
			ctx.source.event.user.reference, '\n',
			'Chat mention:\n',
			ctx.source.event.chat && ctx.source.event.chat.reference || 'no chat',
		]);
		return 1;
	}))

const helpCommand = literal('help')
	.then(argument('name', new StringArgumentType(StringType.GREEDY_PHRAZE)).executes(async ({ source: { ayzek, event }, getArgument }) => {
		const name = getArgument<string>('name');
		const found = ayzek.plugins.find(plugin => plugin.name === name);
		if (!found) {
			event.conversation.send(['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞: ', name]);
		} else {
			event.conversation.send(describePlugin(ayzek, found));
		}
		return 0;
	}))
	.then(literal('all').executes(async ({ source: { ayzek, event } }) => {
		event.conversation.send(textJoin(ayzek.plugins.map(p => describePlugin(ayzek, p)), { type: 'code', data: '\n \n \n' }));
		return 0;
	}))
	.executes(async ({ source: { ayzek, event } }) => {
		event.conversation.send([
			`–í –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–ª–∞–≥–∏–Ω—ã:\n\n`,
			textJoin(ayzek.plugins.map((plugin, i) => textJoin([
				`${i + 1}. ${plugin.name} –æ—Ç ${plugin.author || '–ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'}`,
				`üí¨ ${plugin.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`
			], '\n')), '\n\n'),
			'\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º –ø–ª–∞–≥–∏–Ω–µ –ø–∏—à–∏ /help <–Ω–∞–∑–≤–∞–Ω–∏–µ>, –ª–∏–±–æ /help all –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—è–Ω–∫–∏ ((C) @fishlabsoman)'
		]);
		return 0;
	});

export default class implements PluginInfo {
	name = 'MainPlugin';
	author = '–ù–µ–∫–∏–π–õ–∞—á';
	description = '–ü–ª–∞–≥–∏–Ω, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã - —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏';
	category = PluginCategory.UTILITY;
	commands = [debugCommand, helpCommand];
	listeners = [];
}
