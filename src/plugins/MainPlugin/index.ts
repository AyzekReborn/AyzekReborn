import { Ayzek } from "../../bot/ayzek";
import { MessageEventContext } from "../../bot/context";
import { command, PluginCategory, PluginInfo } from "../../bot/plugin";
import { stringArgument } from "../../command/arguments";
import { Text, textJoin } from "../../model/text";
import { padList } from "../../util/pad";
import { Requirement } from "../../command/requirement";
import { CommandContext } from "../../command/command";
import { Api } from "../../model/api";
import VKApi, { IVKMessageOptions } from "../../api/vk/api";

function padAllListItemExceptFirst(list: string[]) {
	return [
		list[0],
		...padList(list.slice(1), '      ')
	];
}

function describePlugin(ctx: MessageEventContext<any>, ayzek: Ayzek<any>, plugin: PluginInfo): Text<any> {
	return [
		`üîå ${plugin.name}${plugin.category ? ` –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${plugin.category}` : ''}\n`,
		`üïµ‚Äç –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ${plugin.author}\n`,
		`üí¨ ${plugin.description}`,
		...((plugin.commands.length > 0 || plugin.listeners.length > 0) ? [
			`\n\n–°–ø–∏—Å–æ–∫ —Ñ–∏—á:\n`,
			textJoin([
				textJoin(plugin.commands.map(command => {
					const commandNode = ayzek.commandDispatcher.root.literals.get(command.literal)!;
					if (!commandNode.canUse(ctx)) return null;
					return [
						`‚ö° /${command.literal} `,
						{
							type: 'preservingWhitespace',
							data: textJoin(padAllListItemExceptFirst(ayzek.commandDispatcher.getAllUsage(commandNode, ctx, true)), '\n')
						}
					];
				}).filter(e => e !== null).map(e => e!) as any, '\n'),
				textJoin(plugin.listeners.map(listener => [
					`üëÅ‚Äçüó® ${listener.name}${listener.description ? ` ‚Äî ${listener.description}` : ''}`
				]), '\n')
			].filter(e => e.length !== 0), '\n\n'),
		] : [])
	]
}

const requirementIsDevelopment: Requirement<any> = () => process.env.NODE_ENV === 'development';

function requireApi<T extends Api<any>>(api: new (...args: any[]) => T): Requirement<any> {
	return source => {
		return source.event.api instanceof api
	};
}

const debugCommand = command('debug')
	.thenLiteral('mentions', b => b
		.executes(ctx => {
			ctx.source.event.conversation.send([
				'User mention: ', ctx.source.event.user.reference, '\n',
				'Chat mention: ', ctx.source.event.chat && ctx.source.event.chat.reference || 'no chat',
			]);
		}, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π'))
	.thenLiteral('id', b => b
		.executes(ctx => {
			ctx.source.event.conversation.send([
				`UID: ${ctx.source.event.user.uid}\n`,
				`CID: `, ctx.source.event.chat && ctx.source.event.chat.cid || 'no chat', '\n',
				`Full name: ${ctx.source.event.user.fullName}\n`,
				`Name: ${ctx.source.event.user.name}\n`
			]);
		}, 'ID —é–∑–µ—Ä–∞ –∏ —á–∞—Ç–∞'))
	.thenLiteral('msg', b => b
		.executes(ctx => {
			const forwarded = ctx.source.event.maybeForwarded;
			if (!forwarded) {
				ctx.source.event.conversation.send(['No forwarded']);
				return;
			}
			ctx.source.event.conversation.send([
				`UID: ${forwarded.user.uid}\n`,
				`Full name: ${forwarded.user.fullName}\n`,
			]);
		}, '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏'))
	.thenLiteral('keyboard', b => b
		.requires(requireApi(VKApi))
		.executes(async ctx => {
			await ctx.source.event.conversation.send('Keyboard, wow', [], {
				vkKeyboard: {
					inline: true,
					buttons:
						[[{
							action: {
								type: 'text',
								label: 'test',
								payload: '{"text":"asd"}'
							},
							color: 'positive'
						}]],
				}
			} as IVKMessageOptions)
		}, '–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞'))
	.thenLiteral('length-limit-bypass', b => b
		// 20200 chars, only in development mode
		.requires(requirementIsDevelopment)
		.executes(async ctx => {
			await ctx.source.event.conversation.send(('a'.repeat(100) + ' ').repeat(200));
		}, '–û—Ç—Å—ã–ª–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—É—é —Å—Ç—Ä–æ–∫—É'));

const helpCommand = command('help')
	.thenArgument('name', stringArgument('greedy_phraze'), b => b
		.executes(async ctx => {
			const { source: { event, ayzek }, getArgument } = ctx;
			const name = getArgument('name');
			const found = ayzek.plugins.find(plugin => plugin.name === name);
			if (!found) event.conversation.send(['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞: ', name]);
			else event.conversation.send(describePlugin(ctx.source, ayzek, found));
		}, '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–≥–∏–Ω–µ'))
	.thenLiteral('all', b => b
		.executes(async ctx => {
			const { source: { event, ayzek } } = ctx;
			try {
				await event.user.send(textJoin(ayzek.plugins.map(p => describePlugin(ctx.source, ayzek, p)), { type: 'preservingWhitespace', data: '\n \n \n' }));
				if (event.conversation.isChat)
					await event.conversation.send('–ü–æ–º–æ—â—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ–±–µ –≤ –õ–°');
			} catch (e) {
				if (event.conversation.isChat)
					await event.conversation.send('–£ —Ç–µ–±—è –∑–∞–∫—Ä—ã—Ç—ã –õ–°, \n/help all –æ—Ç—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —Ç—É–¥–∞, —Ç.–∫ —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
				else
					console.error(e.stack);
			}
		}, '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–∞—Ö'))
	.executes(async ({ source: { ayzek, event } }) => {
		event.conversation.send([
			`–í –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–ª–∞–≥–∏–Ω—ã:\n\n`,
			textJoin(ayzek.plugins.map((plugin, i) => textJoin([
				`${i + 1}. ${plugin.name} –æ—Ç ${plugin.author || '–ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'}`,
				`üí¨ ${plugin.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`
			], '\n')), '\n\n'),
			'\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º –ø–ª–∞–≥–∏–Ω–µ –ø–∏—à–∏ /help <–Ω–∞–∑–≤–∞–Ω–∏–µ>, –ª–∏–±–æ /help all –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—è–Ω–∫–∏ ((C) @fishlabsoman)'
		]);
	}, '–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤');

export default class implements PluginInfo {
	name = 'MainPlugin';
	author = '–ù–µ–∫–∏–π–õ–∞—á';
	description = '–ü–ª–∞–≥–∏–Ω, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã - —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏';
	category = PluginCategory.UTILITY;
	commands = [debugCommand, helpCommand];
	listeners = [];
}
